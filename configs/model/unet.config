from torch import nn
from torch.optim import Adam

from dpipe.predict import add_extract_dims, patches_grid
from dpipe.torch import inference_step, weighted_cross_entropy_with_logits

from fbp_aug.dataset import scale_ct
from fbp_aug.model import UNet2D


structure = [
    [[8, 8, 16], [16, 8, 8]],
    [[16, 16, 32], [32, 16, 16]],
    [[32, 32, 64], [64, 32, 32]],
    [[64, 64, 128], [128, 64, 64]],
    [[128, 128, 256], [256, 128, 128]],
    [256, 512, 256]
]

n_chans_in = 1
n_chans_out = 1

device = 'cuda'
architecture = UNet2D(structure=structure, n_chans_in=n_chans_in, n_chans_out=n_chans_out)

optimizer = Adam(architecture.parameters(), lr=1e-3)
criterion = weighted_cross_entropy_with_logits


@add_extract_dims(1)
@patches_grid(1, 1, axis=-1)
def predict(image):
    return inference_step(scale_ct(image.squeeze(-1), min_clip=min_clip, max_clip=max_clip),
                          architecture=architecture, activation=nn.Sigmoid())[..., None]

