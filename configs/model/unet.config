import torch
from torch import nn
from torch.optim import Adam

from dpipe import layers
from dpipe.predict import patches_grid, add_extract_dims
from dpipe.torch import inference_step, weighted_cross_entropy_with_logits


structure = [
    [[8, 16], [32, 16, 8]],
    [[16, 32], [64, 32, 16]],
    [[32, 64], [128, 64, 32]],
    [[64, 128], [256, 128, 64]],
    [[128, 256], [512, 256, 128]],
    [256, 512, 256]
]
first_channels = structure[0][0][0]
last_channels = structure[0][-1][-1]

device = 'cuda'
architecture = nn.Sequential(
    nn.Conv2d(1, first_channels, kernel_size=3, padding=1, bias=False),

    layers.FPN(
        layers.ResBlock2d, nn.MaxPool2d(kernel_size=2, ceil_mode=True), nn.Identity(),
        layers.interpolate_merge(lambda x, y: torch.cat([x, y], 1), order=1),
        structure, kernel_size=3, padding=1
    ),

    layers.PreActivation2d(last_channels, 1, kernel_size=1)
)

optimizer = Adam(architecture.parameters(), lr=1e-3)

criterion = weighted_cross_entropy_with_logits


@add_extract_dims(2)
@patches_grid(1, 1)
def predict(image):
    return inference_step(image.squeeze(-1),
                          architecture=architecture, activation=nn.Sigmoid())[..., None]
